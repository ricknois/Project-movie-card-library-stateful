{"version":3,"sources":["components/Header.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","this","props","selectedGenre","onSelectedGenreChange","data-testid","htmlFor","id","value","onChange","bookmarkedOnly","onBookmarkedChange","type","checked","searchText","onSearchTextChange","checkboxGenerate","selectGenerate","AddMovie","state","subtitle","title","imagePath","storyline","rating","genre","handleChanges","bind","handleClick","event","setState","target","name","currentState","onClick","Rating","MovieCard","movie","alt","src","MovieList","movies","map","key","MovieLibrary","newMovieCard","prevState","filteredMovies","length","filter","toLowerCase","includes","filterFav","bookmarked","filterGen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bf2423d.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  selectGenerate() {\n    const { selectedGenre, onSelectedGenreChange } = this.props;\n    return (\n      <label data-testid=\"select-input-label\" htmlFor=\"gen-select\">\n          Filtrar por gênero\n        <select\n          id=\"gen-select\"\n          data-testid=\"select-input\"\n          value={selectedGenre}\n          onChange={onSelectedGenreChange}\n        >\n          <option data-testid=\"select-option\" value=\"\">Todos</option>\n          <option data-testid=\"select-option\" value=\"action\">Ação</option>\n          <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n          <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  checkboxGenerate() {\n    const { bookmarkedOnly, onBookmarkedChange } = this.props;\n    return (\n      <label data-testid=\"checkbox-input-label\" htmlFor=\"fav-check\">\n        Mostrar somente favoritos\n        <input\n          type=\"checkbox\"\n          id=\"fav-check\"\n          data-testid=\"checkbox-input\"\n          checked={bookmarkedOnly}\n          onChange={onBookmarkedChange}\n        />\n      </label>\n    );\n  }\n\n  render() {\n    const { searchText, onSearchTextChange } = this.props;\n    return (\n      <form data-testid=\"search-bar-form\">\n        <label data-testid=\"text-input-label\" htmlFor=\"text-input\">\n          Inclui o texto\n          <input\n            type=\"text\"\n            id=\"text-input\"\n            data-testid=\"text-input\"\n            value={searchText}\n            onChange={onSearchTextChange}\n          />\n        </label>\n        {this.checkboxGenerate()}\n        {this.selectGenerate()}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n\n    this.handleChanges = this.handleChanges.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChanges(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleClick(currentState, onClick) {\n    onClick(currentState);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\n    const { onClick } = this.props;\n\n    return (\n      <form data-testid=\"add-movie-form\">\n        <label data-testid=\"title-input-label\" htmlFor=\"title-input\">\n          Título\n          <input\n            name=\"title\"\n            data-testid=\"title-input\"\n            value={title}\n            onChange={this.handleChanges}\n          />\n        </label>\n        <label data-testid=\"subtitle-input-label\" htmlFor=\"subtitle-input\">\n          Subtítulo\n          <input\n            name=\"subtitle\"\n            data-testid=\"subtitle-input\"\n            value={subtitle}\n            onChange={this.handleChanges}\n          />\n        </label>\n        <label data-testid=\"image-input-label\" htmlFor=\"image-input\">\n          Imagem\n          <input\n            name=\"imagePath\"\n            data-testid=\"image-input\"\n            value={imagePath}\n            onChange={this.handleChanges}\n          />\n        </label>\n        <label data-testid=\"storyline-input-label\" htmlFor=\"storyline-input\">\n          Sinopse\n          <input\n            name=\"storyline\"\n            data-testid=\"storyline-input\"\n            value={storyline}\n            onChange={this.handleChanges}\n          />\n        </label>\n        <label data-testid=\"rating-input-label\" htmlFor=\"rating-input\">\n          Avaliação\n          <input\n            type=\"number\"\n            name=\"rating\"\n            data-testid=\"rating-input\"\n            value={rating}\n            onChange={this.handleChanges}\n          />\n        </label>\n        <label data-testid=\"genre-input-label\" htmlFor=\"genre-input\">\n          Gênero\n          <select\n            name=\"genre\"\n            data-testid=\"genre-input\"\n            value={genre}\n            onChange={this.handleChanges}\n          >\n            <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n            <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n        <button\n          data-testid=\"send-button\"\n          type=\"button\"\n          onClick={() => this.handleClick(this.state, onClick)}\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: PropTypes.func.isRequired };\n\nexport default AddMovie;\n","import React from 'react';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","import React from 'react';\n\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid='movie-card'>\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={rating} />\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n","import React from 'react';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\nimport MovieList from './MovieList';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super();\n\n    const { movies } = props;\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n\n    this.onSearchTextChange = this.onSearchTextChange.bind(this);\n    this.onBookmarkedChange = this.onBookmarkedChange.bind(this);\n    this.onSelectedGenreChange = this.onSelectedGenreChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(newMovieCard) {\n    this.setState((prevState) => ({ movies: [...prevState.movies, newMovieCard] }));\n  }\n\n  onSearchTextChange({ target }) {\n    const { value } = target;\n    const { movies } = this.state;\n    const filteredMovies = (value.length !== 0)\n      ? movies.filter((movie) => {\n        const filter = movie.title.toLowerCase().includes(value)\n          || movie.subtitle.toLowerCase().includes(value)\n          || movie.storyline.toLowerCase().includes(value);\n        return filter;\n      })\n      : movies;\n    this.setState({\n      searchText: value,\n      movies: filteredMovies,\n    });\n  }\n\n  onBookmarkedChange({ target }) {\n    const { checked } = target;\n    const { movies } = this.state;\n    const filterFav = (checked) ? movies.filter((movie) => movie.bookmarked) : movies;\n    this.setState({\n      bookmarkedOnly: checked,\n      movies: filterFav,\n    });\n  }\n\n  onSelectedGenreChange({ target }) {\n    const { value } = target;\n    const { movies } = this.state;\n    const filterGen = (value !== ' ') ? movies.filter((movie) => movie.genre === value) : movies;\n    this.setState({\n      selectedGenre: value,\n      movies: filterGen,\n    });\n  }\n\n  render() {\n    const { movies, searchText, bookmarkedOnly, selectedGenre } = this.state;\n    return (\n      <div>\n        <SearchBar\n          searchText={searchText}\n          bookmarkedOnly={bookmarkedOnly}\n          selectedGenre={selectedGenre}\n          onSearchTextChange={this.onSearchTextChange}\n          onBookmarkedChange={this.onBookmarkedChange}\n          onSelectedGenreChange={this.onSelectedGenreChange}\n        />\n        <MovieList movies={movies} />\n        <AddMovie onClick={this.onClick} />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={movies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}